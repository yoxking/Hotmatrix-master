package ${packageName}.controller;

import java.util.List;
import com.benet.common.core.pager.PageRequest;
import com.benet.common.core.pager.TableDataInfo;
import com.benet.common.utils.uuid.UuidUtils;
import com.benet.common.utils.web.ServletUtils;
import com.benet.framework.security.LoginUser;
import com.benet.framework.security.service.MyJwtokenService;
import io.swagger.annotations.Api;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.benet.common.annotation.Oplog;
import com.benet.common.core.controller.BaseController;
import com.benet.common.core.domain.AjaxResult;
import com.benet.common.enums.BusinessType;
import com.benet.common.utils.poi.ExcelUtils;
import com.benet.common.utils.string.StringUtils;
#if($table.crud)
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Api(value = "${moduleName}/${businessName}", tags = "${functionName}控制器")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController
{
    @Autowired
    private MyJwtokenService tokenService;

    @Autowired
    private I${ClassName}Service ${className}Service;
    /**
     * 首页
     */
    @PreAuthorize("@ps.hasPermit('${permissionPrefix}:index')")
    @GetMapping(value="/index")
    public ModelAndView index()
    {
        ModelAndView mv=new ModelAndView("index");
        return mv;
    }

    /**
     * 查询${functionName}列表
     */
    @PreAuthorize("@ps.hasPermit('${permissionPrefix}:list')")
    @PostMapping(value = "/list")
    public TableDataInfo list(@RequestBody PageRequest pRequest)
    {
        LoginUser loginUser = tokenService.getLoginUser(ServletUtils.getRequest());
        int count = ${className}Service.getCountByCondition(loginUser.getUser().getAppCode(),pRequest.getCondition());
        List<${ClassName}> list = ${className}Service.getRecordsByPaging(loginUser.getUser().getAppCode(),pRequest.getPageIndex(), pRequest.getPageSize(), pRequest.getCondition(), "id", "Asc");
        return getDataTable(list, count);
    }

    /**
     * 新增${functionName}
     */
    @PreAuthorize("@ps.hasPermit('${permissionPrefix}:addnew')")
    @Oplog(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult insert(@RequestBody ${ClassName} ${className}) {
        LoginUser loginUser = tokenService.getLoginUser(ServletUtils.getRequest());
        ${className}.setDeptNo(UuidUtils.shortUUID());
        ${className}.setCreateBy(loginUser.getUser().getUserNo());
        ${className}.setUpdateBy(loginUser.getUser().getUserNo());
        return toAjax(${className}Service.AddNewRecord(loginUser.getUser().getAppCode(),${className}));
    }

    /**
     * 编辑${functionName}
     */
    @PreAuthorize("@ps.hasPermit('${permissionPrefix}:update')")
    @Oplog(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
        public AjaxResult update(@RequestBody ${ClassName} ${className}) {
            LoginUser loginUser = tokenService.getLoginUser(ServletUtils.getRequest());
        ${className}.setUpdateBy(loginUser.getUser().getUserNo());
            return toAjax(${className}Service.UpdateRecord(loginUser.getUser().getAppCode(),${className}));
        }

    /**
     * 保存${functionName}
     */
    @PreAuthorize("@ps.hasPermit('${permissionPrefix}:save')")
    @Oplog(title = "${functionName}", businessType = BusinessType.SAVE)
    @PostMapping(value = "/save")
    public AjaxResult save(@RequestBody ${ClassName} ${className}) {
        LoginUser loginUser = tokenService.getLoginUser(ServletUtils.getRequest());
        if (StringUtils.isNull(${className}Service.getRecordByNo(loginUser.getUser().getAppCode(),${className}.getDeptNo()))) {
            ${className}.setDeptNo(UuidUtils.shortUUID());
            ${className}.setCreateBy(loginUser.getUser().getUserNo());
            ${className}.setUpdateBy(loginUser.getUser().getUserNo());
            return toAjax(${className}Service.AddNewRecord(loginUser.getUser().getAppCode(),${className}));
        } else {
            ${className}.setUpdateBy(loginUser.getUser().getUserNo());
            return toAjax(${className}Service.UpdateRecord(loginUser.getUser().getAppCode(),${className}));
        }
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize("@ps.hasPermit('${permissionPrefix}:delete')")
    @Oplog(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{ids}")
    public AjaxResult delete(@PathVariable("ids") String[] ids)
    {
        LoginUser loginUser = tokenService.getLoginUser(ServletUtils.getRequest());
        return toAjax(${className}Service.SoftDeleteByNos(loginUser.getUser().getAppCode(),ids));
    }

    /**
     * 获取${functionName}详细信息
     */
    @PreAuthorize("@ps.hasPermit('${permissionPrefix}:detail')")
    @GetMapping(value = "/{id}")
    public AjaxResult detail(@PathVariable("id") String id)
    {
        LoginUser loginUser = tokenService.getLoginUser(ServletUtils.getRequest());
        return AjaxResult.success(${className}Service.getRecordByNo(loginUser.getUser().getAppCode(),id));
    }

    /**
     * 导出${functionName}列表
     */
    @PreAuthorize("@ps.hasPermit('${permissionPrefix}:export')")
    @Oplog(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public AjaxResult export(@RequestBody PageRequest pRequest)
    {
        LoginUser loginUser = tokenService.getLoginUser(ServletUtils.getRequest());
        int count = ${className}Service.getCountByCondition(loginUser.getUser().getAppCode(),pRequest.getCondition());

        List<${ClassName}> list = ${className}Service.getRecordsByPaging(loginUser.getUser().getAppCode(),1,count,pRequest.getCondition(),"id","Asc");
        ExcelUtils<${ClassName}> util = new ExcelUtils<${ClassName}>(${ClassName}.class);
        return util.exportExcel(list, "${ClassName}");
    }

}
