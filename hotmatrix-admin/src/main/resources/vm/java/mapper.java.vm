package ${packageName}.mapper;

import java.util.List;
import com.benet.common.core.pager.PagingModel;
import ${packageName}.domain.${ClassName};
import org.apache.ibatis.annotations.Param;

/**
 * ${functionName}Mapper接口
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Mapper
public interface ${ClassName}Mapper 
{
    /**
     * 查询所有${functionName}列表
     *
     * @param appCode 应用编号
     * @return ${functionName}集合
     */
    public List<${ClassName}> getAllRecords(@Param("appCode") String appCode);

    /**
     * 按分类查询${functionName}列表
     *
     * @param appCode 应用编号
     * @param classNo 分类编号
     * @return ${functionName}集合
     */
    public List<${ClassName}> getRecordsByClassNo(@Param("appCode") String appCode,@Param("classNo") String classNo);

    /**
     * 分页查询${functionName}列表
     *
     * @param appCode 应用编号
     * @param model 分页模型
     * @return ${functionName}集合
     */
    public List<${ClassName}> getRecordsByPaging(@Param("appCode") String appCode,@Param("model") PagingModel model);

    /**
     * 查询${functionName}
     *
     * @param appCode 应用编号
     * @param no ${functionName}ID
     * @return ${functionName}
     */
    public ${ClassName} getRecordByNo(@Param("appCode") String appCode,@Param("no") String no);

    /**
     * 查询${functionName}名称
     *
     * @param appCode 应用编号
     * @param no ${functionName}ID
     * @return 名称
     */
    public String getRecordNameByNo(@Param("appCode") String appCode,@Param("no") String no);

    /**
     * 查询${functionName}计数
     *
     * @param appCode 应用编号
     * @param condition 查询条件
     * @return 结果
     */
    public int getCountByCondition(@Param("appCode") String appCode,@Param("condition") String condition);

    /**
     * 新增${functionName}
     *
     * @param info ${functionName}
     * @return 结果
     */
    public int AddNewRecord(@Param("info") ${ClassName} info);

    /**
     * 更新${functionName}
     *
     * @param info ${functionName}
     * @return 结果
     */
    public int UpdateRecord(@Param("info") ${ClassName} info);

    /**
     * 硬删除${functionName}
     *
     * @param appCode 应用编号
     * @param no ${functionName}ID
     * @return 结果
     */
    public int HardDeleteByNo(@Param("appCode") String appCode,@Param("no") String no);

    /**
     * 批量硬删除${functionName}
     *
     * @param appCode 应用编号
     * @param nos ${functionName}IDs
     * @return 结果
     */
    public int HardDeleteByNos(@Param("appCode") String appCode,@Param("nos") String[] nos);

    /**
     * 按条件硬删除${functionName}
     *
     * @param appCode 应用编号
     * @param condition 条件
     * @return 结果
     */
    public int HardDeleteByCondition(@Param("appCode") String appCode,@Param("condition") String condition);

    /**
     * 软删除${functionName}
     *
     * @param appCode 应用编号
     * @param no ${functionName}ID
     * @return 结果
     */
    public int SoftDeleteByNo(@Param("appCode") String appCode,@Param("no") String no);

    /**
     * 批量软删除${functionName}
     *
     * @param appCode 应用编号
     * @param nos ${functionName}IDs
     * @return 结果
     */
    public int SoftDeleteByNos(@Param("appCode") String appCode,@Param("nos") String[] nos);

    /**
     * 按条件软删除${functionName}
     *
     * @param appCode 应用编号
     * @param condition 条件
     * @return 结果
     */
    public int SoftDeleteByCondition(@Param("appCode") String appCode,@Param("condition") String condition);

}
